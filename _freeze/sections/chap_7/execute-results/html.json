{
  "hash": "a1adcf3abcf8fe91e4a0e0ec3b881f67",
  "result": {
    "markdown": "::: {.content-hidden}\n$$\n%%   To set indentation of paragraphs\n\\setlength{\\parindent}{0pt}\n\n\n\n\n\n\n%%%%%%%%%%  MACROS    %%%%%%%%%%%%%%\n\n\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\Q}{\\mathbb{Q}}\n\\newcommand{\\Rtwo}{\\mathbb{R}^2}\n\\newcommand{\\Rthree}{\\mathbb{R}^3}\n\\newcommand{\\C}{\\mathbb{C}}  \n\\newcommand{\\N}{\\mathbb{N}}\n\\newcommand{\\Z}{\\mathbb{Z}}\n\n\n\n\n\\newcommand{\\e}{\\varepsilon}\n\\newcommand{\\g}{\\gamma}\n\n\\newcommand{\\st}{\\, \\text{ s.t } \\, }\n\\newcommand{\\divider}{\\, \\colon \\,}\n\n\\newcommand{\\closure}[2][2]{{}\\mkern#1mu \\overline{\\mkern-#1mu #2 \\mkern-#1mu}\\mkern#1mu {}}\n\n\n\n\n\\newcommand{\\Czero}{\\mathnormal{C}}\n\\newcommand{\\Cinf}{{\\mathnormal{C}}^{\\infty}}\n\\newcommand{\\Cinfcomp}{{\\mathnormal{C}}_0^{\\infty}}\n\\newcommand{\\Lone}{{\\mathnormal{L}}^1}\n\\newcommand{\\Loneloc}{{\\mathnormal{L}}_{loc}^1}\n\\newcommand{\\Ltwo}{{\\mathnormal{L}}^2}\n\\newcommand{\\Lp}{{\\mathnormal{L}}^p}\n\\newcommand{\\Linf}{{\\mathnormal{L}}^{\\infty}}\n\\newcommand{\\Woneone}{{\\mathnormal{W}}^{1,1}}\n\\newcommand{\\Wonetwo}{{\\mathnormal{W}}^{1,2}}\n\\newcommand{\\Wonep}{{\\mathnormal{W}}^{1,p}}\n\\newcommand{\\Woneinf}{{\\mathnormal{W}}^{1,\\infty}}\n\\newcommand{\\Wtwotwo}{{\\mathnormal{W}}^{2,2}}\n\\newcommand{\\Wktwo}{{\\mathnormal{W}}^{k,2}}\n\\newcommand{\\Wkp}{{\\mathnormal{W}}^{k,p}}\n\\newcommand{\\Lip}{\\mathnormal{Lip}}\n\n\n\n\n\\newcommand{\\scp}[2]{\\left\\langle #1,#2 \\right\\rangle} %prodotto scalare\n\\newcommand{\\abs}[1]{\\left| #1 \\right|}  %valore assoluto\n\\newcommand{\\norm}[1]{\\left\\| #1 \\right\\|} %norma\n\n\n\n\n\n\n\n\n\n$$\n:::\n\n\n\n\n# Sequences\n\nComing soon\n\n\n\n\n## Example: Heron's Method\n\n\nThe first explicit algorithm for approximating \n$$\n\\sqrt{x}\n$$ \nfor $x > 0$ is known **Heron's method**, after the first-century Greek mathematician [Heron of Alexandria](https://en.wikipedia.org/wiki/Hero_of_Alexandria) who described the method in his AD 60 work Metrica, see reference to\n[Wikipedia page](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\n\nLet us see what is the idea of the algorithm:\n\n- Suppose that $a_1$ is an approximation of $\\sqrt{x}$ from above, that is,\n$$\n \\sqrt{x} < a_1 \\,.\n$$ {#eq-heron}\n- Multiplying (@eq-heron) by $\\sqrt{x}/a_1$ we obtain\n$$\n\\frac{x}{a_1} < \\sqrt{x} \\,,\n$${#eq-heron-1}\nobtaining an approximation of $\\sqrt{x}$ from below.\n- Therefore, putting together the above inequalities,\n$$\n\\frac{x}{a_1} < \\sqrt{x} < a_1 \n$$ {#eq-heron-2}\n- If we take the average of the points $x/a_1$ and $a_1$, it is reasonable to think that we find a better approximation of $\\sqrt{x}$. Thus our next approximation is\n$$\na_2 := \\frac{1}{2} \\left( a_1 + \\frac{x}{a_1} \\right) \\,,\n$$\nsee figure below.\n\n\n![Heron's Algorithm for approximating $\\sqrt{x}$](/images/heron.png){width=70%}\n\n\nIterating, we define by recurrence the sequence \n$$\na_{n+1} := \\frac12  \\left( a_n + \\frac{x}{a_n} \\right)\n$$\nfor all $n \\in \\N$, where the initial guess $a_1$ has to satisfy (@eq-heron). The aim of the section is to show that\n$$\n\\lim_{n \\to \\infty } \\ a_n = \\sqrt{x} \\,.\n$${#eq-heron-convergence}\nWe start by showing that (@eq-heron-2) holds for all $n \\in \\N$.\n\n::: {.Proposition  #proposition-heron}\nWe have\n$$\n\\frac{x}{a_n} < \\sqrt{x} < a_n \n$${#eq-heron-3}\nfor all $n \\in \\N$.\n:::\n\n\n::: Proof\nWe prove it by induction:\n\n1. By (@eq-heron) and (@eq-heron-1) we know that (@eq-heron-3) holds for $n=1$. \n\n2. Suppose now that (@eq-heron-3) holds for $n$. Then\n\\begin{align}\na_{n+1} - \\sqrt{x} & = \\frac12  \\left( a_n + \\frac{x}{a_n} \\right) - \\sqrt{x} \\\\\n& = \\frac{1}{2 a_n} ( a_n^2 + x - 2 a_n \\sqrt{x} ) \\\\\n& = \\frac{1}{2 a_n} ( a_n - \\sqrt{x} )^2 > 0 \\,,\n\\end{align}\nsince we are assuming that $a_n > \\sqrt{x}$. Therefore\n$$\n\\sqrt{x} < a_{n+1} \\,.\n$${#eq-heron-proof-1}\nMultiplying the above by $\\sqrt{x}/a_{n+1}$ we get\n$$\n\\frac{x}{a_{n+1}} < \\sqrt{x} \\,.\n$${#eq-heron-proof-2}\nInequalities (@eq-heron-proof-1) and (@eq-heron-proof-2) show that (@eq-heron-3) holds for $n+1$.\n\nTherefore we conclude (@eq-heron-3) by the Principle of Induction.\n:::\n\n\nWe are now ready to prove error estimates, that is, estimating how far away $a_n$ is from $\\sqrt{x}$. \n\n\n::: Proposition\n### Error estimate {#proposition-heron-error}\nFor all $n \\in \\N$ we have\n$$\na_{n+1} - \\sqrt{x} < \\frac12 (a_{n} - \\sqrt{x}) \\,.\n$${#eq-heron-half}\n:::\n\n\n::: Proof\nBy Proposition \\ref{proposition-heron} we know that \n$$\n\\frac{x}{a_n} < \\sqrt{x}\n$$\nfor all $n \\in \\N$. Therefore\n\\begin{align}\na_{n+1} & = \\frac12 \\left(  a_n +  \\frac{x}{a_n}   \\right) \\\\\n        & < \\frac12 \\left(  a_n +  \\sqrt{x}   \\right) \\,.\n\\end{align}\nSubtracting $\\sqrt{x}$ from both members in the above inequality we get the thesis.\n:::\n\n\nInequality (@eq-heron-half) is saying that the error halves at each step. Therefore we can prove that after $n$ steps the error is exponentially lower, as detailed in the following proposition.\n\n\n::: {.Proposition #proposition-heron-error-exp}\nFor all $n \\in \\N$ we have\n$$\na_{n+1} - \\sqrt{x} < \\frac{1}{2^n} (a_1 - \\sqrt{x})\n$$ {#eq-heron-error}\n:::\n\n\n\n::: Proof\nWe prove (@eq-heron-error) by induction:\n\n1. For $n=1$ we have that (@eq-heron-error) is satisfied, since it coincides with (@eq-heron-half) for $n=1$.\n2. Suppose that (@eq-heron-error) holds for $n$. By (@eq-heron-half) with $n$ replaced by $n+1$ we have\n\\begin{align}\na_{n+2} - \\sqrt{x} & < \\frac12 (a_{n+1} - \\sqrt{x}) \\\\\n& < \\frac12 \\,\\cdot \\, \\frac{1}{2^n} (a_{1} - \\sqrt{x}) \\\\\n& = \\frac{1}{2^{n+1}} (a_{1} - \\sqrt{x})\n\\end{align}\nwhere in the second inequality we used the induction hypothesis (@eq-heron-error). Hence (@eq-heron-error) holds for $n+1$.\n\nBy invoking the Induction Principle we conclude the proof.\n:::\n\nLet us comment estimate (@eq-heron-error). Denote the error at step $n$ by\n$$\ne_n := a_n - \\sqrt{x}\\,.\n$$\nThe initial error $e_1$ depends on how far the initial guess is from $\\sqrt{x}$. The estimate in (@eq-heron-error) is telling us that $e_n$ is a fraction of $e_1$, and actually\n$$\n\\lim_{n \\to \\infty} \\ e_n = 0\n$$\nexponentially fast. From this fact we are finally able to prove (@eq-heron-convergence).\n\n::: Theorem\n### Convergence of Heron's Algorithm\nWe have that \n$$\n\\lim_{n \\to \\infty} \\ a_n = \\sqrt{x} \\,.\n$$\n:::\n\n::: Proof\nBy Proposition \\ref{proposition-heron-error-exp} we have that\n$$\na_{n+1} - \\sqrt{x} < \\frac{1}{2^n} (a_1 - \\sqrt{x})\n$$\nMoreover Proposition \\ref{proposition-heron} tells us that\n$$\n\\sqrt{x} < a_{n+1} \\,.\n$$\nPutting together the two inequalities above we infer\n$$\n\\sqrt{x} < a_{n+1} < \\sqrt{x} + \\frac{1}{2^n} (a_1 - \\sqrt{x}) \\,.\n$${#eq-heron-final}\nNow note that\n$$\n\\lim_{n \\to \\infty} \\ \\frac{1}{2^n} =\n\\lim_{n \\to \\infty} \\ \\left( \\frac{1}{2} \\right)^n = 0 \\,.\n$$\nTherefore the RHS of (@eq-heron-final) converges to $\\sqrt{x}$ as $n \\to \\infty$. Applying the Squeeze Theorem to (@eq-heron-final) we conclude that $a_n \\to \\sqrt{x}$ as $n \\to \\infty$.\n:::\n\n\n\n### Coding the Algorithm\n\nHeron's Algorithm can be easily coded in Python. For example, see the function below:\n\n```python\n# x is the number for which to compute sqrt(x)\n# guess is the point a_1\n# a_1 must be strictly larger than sqrt(x)\n# n is the number of iterations\n# the function returns a_{n+1}\n\ndef herons_algorithm(x, guess, n):\n    for i in range(n):\n        guess = (guess + x / guess) / 2.0\n    return guess\n```\n\nFor example let us use the Algorithm to compute $\\sqrt{2}$ after $3$ iterations. For initial guess we take $a_1 = 2$. \n\n```python\n# Calculate sqrt(2) with 3 iterations and guess 2\nsqrt_2 = herons_algorithm(2, 2, 3)\n\nprint(f\"The sqrt(2) is approximately {sqrt_2}\")\n```\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nThe sqrt(2) is approximately 1.4142156862745097\n```\n:::\n:::\n\n\nThat is a pretty good approximation in just $3$ iterations!\n\n\n\n\n\n## Fibonacci Sequence\n\n",
    "supporting": [
      "chap_7_files"
    ],
    "filters": [],
    "includes": {}
  }
}